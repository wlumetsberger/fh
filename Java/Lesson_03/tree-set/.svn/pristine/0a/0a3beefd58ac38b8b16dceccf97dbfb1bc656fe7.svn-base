package swe4.collections;

import java.util.*;

public class BSTMultiSet<T extends Comparable<T>> implements SortedMultiSet<T> {

  private static class Node<T> {
    private T value;
    private Node<T> left, right;

    Node(T val, Node<T> left, Node<T> right) {
      this.value = val;
      this.left = left;
      this.right = right;
    } // Node
  } // Node

  private static class BSTIterator<T> implements Iterator<T> {
    private Stack<Node<T>> unvisitedParents = new Stack<>();

    public BSTIterator(Node<T> root) {
      Node<T> next = root;
      while (next != null) {
        unvisitedParents.push(next);
        next = next.left;
      } // while
    } // TreeSetIterator

    public boolean hasNext() {
      return !unvisitedParents.empty();
    } // hasNext

    public T next() {
      if (! hasNext()) {
        throw new NoSuchElementException();
      }
      else {
        Node<T> cur = unvisitedParents.pop();
        Node<T> next = cur.right;
        while (next != null) {
          unvisitedParents.push(next);
          next = next.left;
        } // while
        return cur.value;
      } // if/else
    } // next

    // default implementation in Java 8
//    public void remove() {
//      throw new UnsupportedOperationException();
//    } // remove
  } // BSTIterator

  private Node<T> root; // root node
  private int     size;

  public BSTMultiSet() {
    this.root = null;
  } // BSTMultiSet

  @SuppressWarnings("unused")
  private Node<T> addRecursive(Node<T> parent, T element) {
    if (parent == null) {
      size++;
      return new Node<T>(element, null, null);
    }

    if (element.compareTo(parent.value) < 0)
      parent.left = addRecursive(parent.left, element);
    else // if (element.compareTo(t.val) >= 0)
      parent.right = addRecursive(parent.right, element);
    
    return parent;
  } // addRecursive

  private void addIterative(T element) {
    Node<T> parent = null;
    Node<T> t = root;
    while (t != null) {
      parent = t;
      if (element.compareTo(t.value) < 0)
        t = t.left;
      else
        t = t.right;
    } // while

    Node<T> newNode = new Node<T>(element, null, null);
    if (parent == null)
      root = newNode;
    else if (element.compareTo(parent.value) < 0)
      parent.left = newNode;
    else
      parent.right = newNode;

    size++;
  } // addIterative

  public void add(T element) {
    //root = addRecursive(root, element);
    addIterative(element);
  } // add

  public boolean contains(T element) {
    return get(element) != null;
  }

  public T get(T element) {
    Node<T> t = root;
    while (t != null) {
      int cmp = t.value.compareTo(element);
      if (cmp == 0) 
        return t.value;
      else if (cmp > 0) // t.value > element
        t = t.left;
      else
        // cmp <= 0 // t.value < element
        t = t.right;
    } // while
    return null;
  } // get

  private void traverseInOrder(Node<T> t, StringBuffer sb) {
    if (t != null) {
      traverseInOrder(t.left, sb);
      if (sb.length() > 1) sb.append(", ");
      sb.append(t.value);
      traverseInOrder(t.right, sb);
    } // if
  } // traverseInOrder

  @Override
  public String toString() {
    StringBuffer sb = new StringBuffer();
    sb.append("[");
    traverseInOrder(root, sb);
    sb.append("]");
    return sb.toString();
  } // toString

  public Iterator<T> iterator() {
    return new BSTIterator<T>(root);
  } // iterator

  public int size() {
    return size;
  }
} // BSTMultiSet
